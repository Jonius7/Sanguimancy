buildscript {
    repositories {
        mavenCentral()
        maven {
            name = "forge"
            url = "https://maven.minecraftforge.net/"
        }
        maven { url = "https://oss.sonatype.org/content/repositories/snapshots/" }
        maven {
            name "ModMaven"
            url "https://modmaven.dev"
        }
    }
    dependencies {
        classpath ('com.anatawa12.forge:ForgeGradle:1.2-1.1.+') {
            changing = true
        }
        classpath 'org.ajoberstar:gradle-git:0.10.1'
    }
}

import org.ajoberstar.grgit.Grgit

apply plugin: 'forge'
apply plugin: 'maven-publish'

sourceCompatibility = 1.8
targetCompatibility = 1.8

def build_number = 'CUSTOM'

if (System.getenv('BUILD_NUMBER') != null)
    build_number = System.getenv('BUILD_NUMBER')

group = package_group
archivesBaseName = mod_name
version = "${mc_version}-${mod_version}-${build_number}"

def gitHash = 'unknown'
if (new File(projectDir, '.git').exists()) {
    def repo = Grgit.open(project.file('.'))
    gitHash = repo.log().find().abbreviatedId
}

minecraft {
    version = "${mc_version}-${forge_version}-${mc_version}"
    runDir = "run"
	
	replace "@VERSION@", project.version
    replaceIn "Sanguimancy.java"

    if (project.hasProperty('mappings_version'))
        mappings = project.mappings_version
}

processResources {
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    from(sourceSets.main.resources.srcDirs) {
        include '**/*.info'
        include '**/*.properties'

        expand 'version': project.version, 'mcversion': project.minecraft.version
    }
    from(sourceSets.main.resources.srcDirs) {
        exclude '**/*.info'
        exclude '**/*.properties'
    }
}

repositories {
    maven { // WAILA
        name "Mobius Repo"
        url "http://mobiusstrip.eu/maven"
    }
    maven {
        name 'CB Repo'
        url "http://chickenbones.net/maven/"
    }
	maven { 
		name 'TehNut Repo'
		url "http://tehnut.info/maven/"
	}
	maven {
		name 'OpenComputers Repo'
		url "http://maven.cil.li/"
	}
}

dependencies {
	compile "codechicken:CodeChickenCore:${mc_version}-${ccc_version}:dev"
	compile "codechicken:CodeChickenLib:${mc_version}-${ccl_version}:dev"
	compile "codechicken:NotEnoughItems:${mc_version}-${nei_version}:dev"
	
	compile "mcp.mobius.waila:Waila:${waila_version}_${mc_version}:dev"
	
	compile "li.cil.oc:OpenComputers:MC${mc_version}-${oc_version}:dev"
	
	compile "info.amerifrance.guideapi:Guide-API:${mc_version}-${guideapi_version}:deobf"
    compile fileTree(dir: 'libs', include: '*.jar')
}

task copyModDeps(type: Copy, dependsOn: "extractUserDev") {
	from { configurations.compile }
	include "**/*CodeChickenCore*.jar", "**/*NotEnoughItems*.jar"
	into file(minecraft.runDir + "/mods")
	
	mustRunAfter "deobfBinJar"
    mustRunAfter "repackMinecraft"
}
	
task copyLibDeps(type: Copy, dependsOn: "extractUserDev") {
	from { configurations.compile }
	include "**/CodeChickenLib*.jar"
	into file(minecraft.runDir + "/mods/1.7.10")
		
	mustRunAfter "deobfBinJar"
    mustRunAfter "repackMinecraft"
}

tasks.setupDevWorkspace.dependsOn copyModDeps, copyLibDeps
tasks.setupDecompWorkspace.dependsOn copyModDeps, copyLibDeps

jar {
    classifier = ''
    manifest.mainAttributes(
            "Built-By": System.getProperty('user.name'),
            "Created-By": "${System.getProperty('java.vm.version')} + (${System.getProperty('java.vm.vendor')})",
            "Implementation-Title": project.name,
            "Implementation-Version": project.version,
            "Git-Hash": gitHash
    )
}

// Add a source jar
task sourceJar(type: Jar) {
    from sourceSets.main.allSource
    classifier = 'sources'
}

// Add a javadoc jar
task javadocJar(type: Jar, dependsOn: javadoc) {
    from javadoc.destinationDir
    classifier = 'javadoc'
}

// Adds a deobfuscated jar
task deobfJar(type: Jar) {
    from sourceSets.main.output
    classifier = 'deobf'
}

tasks.build.dependsOn sourceJar, javadocJar, deobfJar

tasks.withType(JavaCompile) { task ->
    task.options.encoding = 'UTF-8'
}

publishing {
    tasks.publish.dependsOn 'build'
    publications {
        mavenJava(MavenPublication) {
            from components.java
            artifact sourceJar
            artifact javadocJar
            artifact deobfJar
        }
    }
    repositories {
        if (project.hasProperty('maven_repo')) {
            maven { url maven_repo }
        } else {
            mavenLocal()
        }
    }
}

fileTree('gradle').include('curse.gradle').collect().sort().each { apply from: it }
